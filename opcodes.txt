LD   = load
LDD  = load and decrement
LDI  = load and increment
ADD  = add
ADC  = add with carry
SUB  = subtract
SBC  = subtract with carry
AND  = and
OR   = or
CP   = compare (SUB ohne Ergebnis)
INC  = increment
DEC  = decrement
SWAP = swap upper and lower nibble
DAA  = decimal adjust
CPL  = complement
CCF  = complement carry flag
SCF  = set carry flag
NOP  = no operation
HALT = halt CPU until interrupt occurs
STOP = halt CPU & display until button pressed
DI   = disables interrupts (after the instruction after DI)
EI   = enables interrupts (after the instruction after DI)
RLCA = rotate A left, bit 7 -> CF
RLC  = rotate left, bit 7 -> CF
RLA  = rotate A left through CF
RL   = rotate left through CF
RRCA = rotate A right, bit 0 -> CF
RRC  = rotate right, bit 0 -> CF
RRA  = rotate A right through CF
RR   = rotate right through CF
SLA  = shift left into CF (LSB == 0)
SRA  = shift right into CF (MSB unchanged)
SRL  = shift right into CF (MSB == 0)
BIT  = test bit
SET  = set bit
RES  = reset bit
JP   = jump (JPZ, JPNZ, JPC, JPNC)
JR   = jump relative (JRZ, JRNZ, JRC, JRNC)
CALL = call (PUSH IP + 3; JP) (CALLZ, CALLNZ, CALLC, CALLNC)
RST  = restart (PUSH IP; JP $0000 + n)
RET  = return (POP IP) (RETZ, RETNZ, RETC, RETNC)
RETI = return and enable interrupts (EI; POP IP)

LD a, b
-> MOV a, b
LDD a, [b]
-> MOV a, [b]
   DEC b
LDD [a], b
-> MOV [a], b
   DEC a
LDI a, [b]
-> MOV a, [b]
   INC b
LDI [a], b
-> MOV [a], b
   INC a
CP a, b
-> CMP a, b

ADD/ADC:
——> Flags:
    - Z: Gesetzt, wenn 0 rauskommt (ADD SP,n: Gelöscht)
    - N: Gelöscht
    - H: Bei Übertrag vom Bit 3 (11) gesetzt
    - C: Bei Übertrag vom Bit 7 (15) gesetzt

SUB/SBC/CP:
——> Flags:
    - Z: Gesetzt, wenn 0 rauskommt (CP: a == b)
    - N: Gesetzt
    - H: Gesetzt, wenn kein Borgen von Bit 4 erfolgt ist
    - C: Gesetzt, wenn gar kein Borgen erfolgt ist (CP: a < b)

AND:
——> Flags:
    - Z: Gesetzt, wenn 0 rauskommt
    - N, C: Gelöscht
    - H: Gesetzt

OR/XOR/SWAP:
——> Flags:
    - Z: Gesetzt, wenn 0 rauskommt
    - N, H, C: Gelöscht

INC n:
——> Flags:
    - Z: Gesetzt, wenn 0 rauskommt
    - N: Gelöscht
    - H: Bei Übertrag vom Bit 3 gesetzt
    - C: Unverändert

DEC n:
——> Flags:
    - Z: Gesetzt, wenn 0 rauskommt
    - N: Gesetzt
    - H: Gesetzt, wenn kein Borgen von Bit 4 erfolgt ist
    - C: Unverändert

INC nn/DEC nn: Keine Flagveränderungen.

DAA:
——> Flags:
    - Z: Gesetzt, wenn 0 rauskommt
    - N: Unverändert
    - H: Gelöscht
    - C: Je nach Ausgang der Operation

CPL:
——> Flags:
    - Z, C: Unverändert
    - N, H: Gesetzt

CCF/SCF:
——> Flags:
    - Z: Unverändert
    - N, H: Gelöscht
    - C: Invertiert/Gelöscht

Shifts:
——> Flags:
    - Z: Gesetzt, wenn 0 rauskommt
    - N, H: Gelöscht
    - C: Je nachdem

BIT:
——> Flags:
    - Z: Status des Bits (0 -> 1; 1 -> 0)
    - N: Gelöscht
    - H: Gesetzt
    - C: Unverändert

0x00 —— NOP
0x01 —— LD BC, nn
0x02 —— LD (BC), A
0x03 —— INC BC
0x04 —— INC B
0x05 —— DEC B
0x06 —— LD B, n
0x07 —— RLCA
0x08 —— LD (nn), SP
0x09 —— ADD HL, BC
0x0A —— LD A, (BC)
0x0B —— DEC BC
0x0C —— INC C
0x0D —— DEC C
0x0E —— LD C, n
0x0F —— RRCA
0x10 —— Prefix
    0x00 —— STOP
0x11 —— LD DE, nn
0x12 —— LD (DE), A
0x13 —— INC DE
0x14 —— INC D
0x15 —— DEC D
0x16 —— LD D, n
0x17 —— RLA
0x18 —— JR n (signed)
0x19 —— ADD HL, DE
0x1A —— LD A, (DE)
0x1B —— DEC DE
0x1C —— INC E
0x1D —— DEC E
0x1E —— LD E, n
0x1F —— RRA
0x20 —— JRNZ n (signed)
0x21 —— LD HL, nn
0x22 —— LDI (HL), A
0x23 —— INC HL
0x24 —— INC H
0x25 —— DEC H
0x26 —— LD H, n
0x27 —— DAA A
0x28 —— JRZ n (signed)
0x29 —— ADD HL, HL
0x2A —— LDI A, (HL)
0x2B —— DEC HL
0x2C —— INC L
0x2D —— DEC L
0x2E —— LD L, n
0x2F —— CPL A
0x30 —— JRNC n (signed)
0x31 —— LD SP, nn
0x32 —— LDD (HL), A
0x33 —— INC SP
0x34 —— INC (HL)
0x35 —— DEC (HL)
0x36 —— LD (HL), n
0x37 —— SCF
0x38 —— JRC n (signed)
0x39 —— ADD HL, SP
0x3A —— LDD A, (HL)
0x3B —— DEC SP
0x3C —— INC A
0x3D —— DEC A
0x3E —— LD A, #
0x3F —— CCF
0x40 —— LD B, B
0x41 —— LD B, C
0x42 —— LD B, D
0x43 —— LD B, E
0x44 —— LD B, H
0x45 —— LD B, L
0x46 —— LD B, (HL)
0x47 —— LD B, A
0x48 —— LD C, B
0x49 —— LD C, C
0x4A —— LD C, D
0x4B —— LD C, E
0x4C —— LD C, H
0x4D —— LD C, L
0x4E —— LD C, (HL)
0x4F —— LD C, A
0x50 —— LD D, B
0x51 —— LD D, C
0x52 —— LD D, D
0x53 —— LD D, E
0x54 —— LD D, H
0x55 —— LD D, L
0x56 —— LD D, (HL)
0x57 —— LD D, A
0x58 —— LD E, B
0x59 —— LD E, C
0x5A —— LD E, D
0x5B —— LD E, E
0x5C —— LD E, H
0x5D —— LD E, L
0x5E —— LD E, (HL)
0x5F —— LD E, A
0x60 —— LD H, B
0x61 —— LD H, C
0x62 —— LD H, D
0x63 —— LD H, E
0x64 —— LD H, H
0x65 —— LD H, L
0x66 —— LD H, (HL)
0x67 —— LD H, A
0x68 —— LD L, B
0x69 —— LD L, C
0x6A —— LD L, D
0x6B —— LD L, E
0x6C —— LD L, H
0x6D —— LD L, L
0x6E —— LD L, (HL)
0x6F —— LD L, A
0x70 —— LD (HL), B
0x71 —— LD (HL), C
0x72 —— LD (HL), D
0x73 —— LD (HL), E
0x74 —— LD (HL), H
0x75 —— LD (HL), L
0x76 —— HALT
0x77 —— LD (HL), A
0x78 —— LD A, B
0x79 —— LD A, C
0x7A —— LD A, D
0x7B —— LD A, E
0x7C —— LD A, H
0x7D —— LD A, L
0x7E —— LD A, (HL)
0x7F —— LD A, A
0x80 —— ADD A, B
0x81 —— ADD A, C
0x82 —— ADD A, D
0x83 —— ADD A, E
0x84 —— ADD A, H
0x85 —— ADD A, L
0x86 —— ADD A, (HL)
0x87 —— ADD A, A
0x88 —— ADC A, B
0x89 —— ADC A, C
0x8A —— ADC A, D
0x8B —— ADC A, E
0x8C —— ADC A, H
0x8D —— ADC A, L
0x8E —— ADC A, (HL)
0x8F —— ADC A, A
0x90 —— SUB A, B
0x91 —— SUB A, C
0x92 —— SUB A, D
0x93 —— SUB A, E
0x94 —— SUB A, H
0x95 —— SUB A, L
0x96 —— SUB A, (HL)
0x97 —— SUB A, A
0x98 —— SBC A, B
0x99 —— SBC A, C
0x9A —— SBC A, D
0x9B —— SBC A, E
0x9C —— SBC A, H
0x9D —— SBC A, L
0x9E —— SBC A, (HL)
0x9F —— SBC A, A
0xA0 —— AND A, B
0xA1 —— AND A, C
0xA2 —— AND A, D
0xA3 —— AND A, E
0xA4 —— AND A, H
0xA5 —— AND A, L
0xA6 —— AND A, (HL)
0xA7 —— AND A, A
0xA8 —— XOR A, B
0xA9 —— XOR A, C
0xAA —— XOR A, D
0xAB —— XOR A, E
0xAC —— XOR A, H
0xAD —— XOR A, L
0xAE —— XOR A, (HL)
0xAF —— XOR A, A
0xB0 —— OR A, B
0xB1 —— OR A, C
0xB2 —— OR A, D
0xB3 —— OR A, E
0xB4 —— OR A, H
0xB5 —— OR A, L
0xB6 —— OR A, (HL)
0xB7 —— OR A, A
0xB8 —— CP A, B
0xB9 —— CP A, C
0xBA —— CP A, D
0xBB —— CP A, E
0xBC —— CP A, H
0xBD —— CP A, L
0xBE —— CP A, (HL)
0xBF —— CP A, A
0xC0 —— RETNZ
0xC1 —— POP BC
0xC2 —— JPNZ nn
0xC3 —— JP nn
0xC4 —— CALLNZ nn
0xC5 —— PUSH BC
0xC6 —— ADD A, #
0xC7 —— RST $0000
0xC8 —— RETZ
0xC9 —— RET
0xCA —— JPZ nn
0xCB —— Prefix
    0x00 —— RLC B
    0x01 —— RLC C
    0x02 —— RLC D
    0x03 —— RLC E
    0x04 —— RLC H
    0x05 —— RLC L
    0x06 —— RLC (HL)
    0x07 —— RLC A
    0x08 —— RRC B
    0x09 —— RRC C
    0x0A —— RRC D
    0x0B —— RRC E
    0x0C —— RRC H
    0x0D —— RRC L
    0x0E —— RRC (HL)
    0x0F —— RRC A
    0x10 —— RL B
    0x11 —— RL C
    0x12 —— RL D
    0x13 —— RL E
    0x14 —— RL H
    0x15 —— RL L
    0x16 —— RL (HL)
    0x17 —— RL A
    0x18 —— RR B
    0x19 —— RR C
    0x1A —— RR D
    0x1B —— RR E
    0x1C —— RR H
    0x1D —— RR L
    0x1E —— RR (HL)
    0x1F —— RR A
    0x20 —— SLA B
    0x21 —— SLA C
    0x22 —— SLA D
    0x23 —— SLA E
    0x24 —— SLA H
    0x25 —— SLA L
    0x26 —— SLA (HL)
    0x27 —— SLA A
    0x28 —— SRA B
    0x29 —— SRA C
    0x2A —— SRA D
    0x2B —— SRA E
    0x2C —— SRA H
    0x2D —— SRA L
    0x2E —— SRA (HL)
    0x2F —— SRA A
    0x30 —— SWAP B
    0x31 —— SWAP C
    0x32 —— SWAP D
    0x33 —— SWAP E
    0x34 —— SWAP H
    0x35 —— SWAP L
    0x36 —— SWAP (HL)
    0x37 —— SWAP A
    0x38 —— SRL B
    0x39 —— SRL C
    0x3A —— SRL D
    0x3B —— SRL E
    0x3C —— SRL H
    0x3D —— SRL L
    0x3E —— SRL (HL)
    0x3F —— SRL A
    0x40 —— BIT b, B
    0x41 —— BIT b, C
    0x42 —— BIT b, D
    0x43 —— BIT b, E
    0x44 —— BIT b, H
    0x45 —— BIT b, L
    0x46 —— BIT b, (HL)
    0x47 —— BIT b, A
    0x80 —— RES b, B
    0x81 —— RES b, C
    0x82 —— RES b, D
    0x83 —— RES b, E
    0x84 —— RES b, H
    0x85 —— RES b, L
    0x86 —— RES b, (HL)
    0x87 —— RES b, A
    0xC0 —— SET b, B
    0xC1 —— SET b, C
    0xC2 —— SET b, D
    0xC3 —— SET b, E
    0xC4 —— SET b, H
    0xC5 —— SET b, L
    0xC6 —— SET b, (HL)
    0xC7 —— SET b, A
0xCC —— CALLZ nn
0xCD —— CALL nn
0xCE —— ADC A, #
0xCF —— RST $0008
0xD0 —— RETNC
0xD1 —— POP DE
0xD2 —— JPNC nn
0xD3 —— —
0xD4 —— CALLNC nn
0xD5 —— PUSH DE
0xD6 —— SUB A, #
0xD7 —— RST $0010
0xD8 —— RETC
0xD9 —— RETI
0xDA —— JPC nn
0xDB —— —
0xDC —— CALLC nn
0xDD —— —
0xDE —— —
0xDF —— RST $0018
0xE0 —— LD ($FF00 + n), A
0xE1 —— POP HL
0xE2 —— LD ($FF00 + C), A
0xE3 —— —
0xE4 —— —
0xE5 —— PUSH HL
0xE6 —— AND A, #
0xE7 —— RST $0020
0xE8 —— ADD SP, # (signed)
0xE9 —— JP (HL)
0xEA —— LD (nn), A
0xEB —— —
0xEC —— —
0xED —— —
0xEE —— XOR A, #
0xEF —— RST $0028
0xF0 —— LD A, ($FF00 + n)
0xF1 —— POP AF
0xF2 —— LD A, ($FF00 + C)
0xF3 —— DI
0xF4 —— —
0xF5 —— PUSH AF
0xF6 —— OR B, #
0xF7 —— RST $0030
0xF8 —— LD HL, SP + n
     ——> Flags:
         - Z, N: reset
         - H, C: set/reset (je nach SP + n)
0xF9 —— LD SP, HL
0xFA —— LD A, (nn)
0xFB —— EI
0xFC —— —
0xFD —— —
0xFE —— CP A, #
0xFF —— RST $0038